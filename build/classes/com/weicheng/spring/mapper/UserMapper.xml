<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!-- 
	本文件演示MyBatis mapper.xml操作以下几个知识点：
	1、普通的增删改查操作
	2、parameterType和resultType的使用
	3、sql片段的使用：<sql> <if> <where> <foreach>
	4、resultMap的使用
 -->

<!-- 使用namespace标签对sql进行分类化管理 -->
<mapper namespace="com.weicheng.spring.mapper.UserMapper">

	
	<!-- 开启二级缓存 -->
	<!-- <cache/> -->
	
	<!-- 开启ehcache分布式缓存 -->
	<cache type="org.mybatis.caches.ehcache.EhcacheCache"></cache>
	

	<!-- 在映射文件中可以配置很多sql语句 -->
	<!-- 通过selecct执行数据库查询
	id：标识映射文件中的sql，将sql语句封装到mappedStatement对象中，所以将id称为statement的id 
	-->
	
	<!-- 通过id查询用户 -->
	<!-- parameterType：指定输入参数的类型 -->
	<!-- resultType：指定输出结果所映射的java对象类型 -->
	<!-- #{}占位符用来接受参数，其中的值可以任意命名 -->
	<select id="findUserById" parameterType="int" resultType="user">
		SELECT * FROM t_user WHERE id = #{id}
	</select>
	
	
	<!-- 
		通过id查询用户，不使用缓存 
		useCache：false不使用二级缓存，true使用缓存
	-->
	<select id="findUserByIdNoCache" parameterType="int" resultType="user" useCache="false">
		SELECT * FROM t_user WHERE id = #{id}
	</select>
	
	
	<!-- 通过名称查询用户 -->
	<!-- ${}占位符表示将接受到的参数不加任何修饰直接拼接在sql中，有sql注入隐患 -->
	<!-- ${}中如果接收的是简单类型的参数，只能使用value命名来接收 -->
	<select id="findUserByName" parameterType="java.lang.String" resultType="com.weicheng.po.User">
		SELECT * FROM t_user WHERE name LIKE '%${value}%'
	</select>
	
	
	<!-- 添加用户 -->
	<!-- parameterType为pojo类型时#{}内的占位符需要传入pojo的成员变量名 -->
	<insert id="insertUser" parameterType="com.weicheng.po.User">
	
		<!-- 需求：将新插入数据生成的自增主键id返回到user对象中 -->
		<!-- keyProperty：将查询到的主键值设置到parameterType的哪个属性 -->
		<!-- order：SELECT LAST_INSERT_ID()的执行时机， -->
		<!-- 注意：这个方式只能用在主键自增的表中 -->
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			SELECT LAST_INSERT_ID()
		</selectKey>
	
		INSERT INTO t_user(name) VALUE(#{name})
	</insert>
	
	
	<!-- 删除用户 -->
	<delete id="deleteUser" parameterType="java.lang.Integer">
		DELETE FROM t_user WHERE id=#{id}
	</delete>
	
	
	<!-- 根据Id更新用户 -->
	<!-- 指定Id需要放入传入的User对象的id成员变量中 -->
	<update id="updateUser" parameterType="com.weicheng.po.User">
		UPDATE t_user SET name=#{name} WHERE id=#{id}
	</update>
	
	
	<!-- 定义sql片段演示 -->
	<!-- 
		经验：
		1、基于单表来定义sql片段可重用性比较高 
		2、在sql片段中不要包含<where>
	-->
	<sql id="query_user_where">
	
		<!-- 动态sql演示：需求：根据传入user的id或name条件去查询，没有传则自动忽略条件 -->
		<if test="user != null">
			<if test="user.id != 0">
				AND id = #{user.id}
			</if>
			<if test="user.name != null and user.name != ''">
				AND name LIKE '%${user.name}%'	
			</if>
		</if>
		
		<if test="idList != null">
		
		<!-- 
			<foreach>演示
			使用<foreach>实现sql：AND ( id=1 OR id=10 OR id=16 ) 
			collection：指定输入对象中的集合属性
			item：遍历生成的对象名
			open：开始遍历前的sql
			close：结束遍历后的sql
			separator：遍历中需要用来做分割的sql
		-->
		
		<foreach collection="idList" item="id" open="AND (" close=")" separator="OR">
			id=#{id}
		</foreach>
		
		<!-- 实现 AND id IN (1,10,16) 的sql串拼接演示 -->
		<!-- 
		<foreach collection="idList" item="id" open="AND id IN (" close=")" separator=",">
			#{id}
		</foreach>
		-->
		
		</if>
	
	</sql>
	
	<!-- 用户综合查询（pojo类型的parameterType演示、动态sql演示） -->
	<select id="findUser" parameterType="com.weicheng.po.UserQueryVo" resultType="com.weicheng.po.User">
		SELECT id,name FROM t_user
		
		<!-- <where>可以去掉条件语句中的第一个"AND" -->
		<where>
		
			<!-- 引用sql片段演示 -->
			<include refid="query_user_where"></include>
			
			<!-- 还可以继续引用其他的sql片段 -->
			
		</where>
		
	</select>
	
	<!-- 查询特定名称下的数据数量（简单类型resultType演示） -->
	<select id="findUserCount" parameterType="String" resultType="int">
		SELECT count(*) FROM t_user WHERE name LIKE '%${value}%'
	</select>
	
	
	
	<!-- 
		定义resultMap，将查询出来的数据库字段和pojo类的属性做一个映射
		type：需要映射的pojo类型，可以使用别名
		id：resultMap的唯一标识
	 -->
	<resultMap type="com.weicheng.po.User" id="userResultMap">
		
		<!-- 
			<id>表示查询结果集中的唯一标识（主键）
			column：查询出来的列名
			property：对应的type中指定的pojo类型的属性名
			resultMap会对column和property做一个映射关系
		 -->
		<id column="_id" property="id"/>
		
		<!-- <result>表示对普通的列名进行映射 -->
		<result column="_name" property="name"/>
		
	</resultMap>
	
	<!-- 使用resultMap建立查询字段映射演示 -->
	<select id="findUserByIdWithResultMap" parameterType="int" resultMap="userResultMap">
		SELECT id _id,name _name FROM t_user WHERE id=#{value}	
	</select>


</mapper>






